//
//  MessagesViewController.swift
//  neonMessage
//
//  Created by James Saeed on 19/05/2019.
//  Copyright Â© 2019 James Saeed. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
	
	@IBOutlet weak var tableView: UITableView!
	var savedConversation: MSConversation?
	
	var blocks = [Block]() {
		didSet {
			blocks = blocks.filter { $0.hour >= Calendar.current.component(.hour, from: Date()) }
		}
	}
    
    override func viewDidLoad() {
        super.viewDidLoad()
		
//		blocks = DataGateway.shared.loadBlocks()[Day.today.rawValue]!
		DispatchQueue.main.async { self.tableView.reloadData() }
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
		savedConversation = conversation
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
	
	func createMessage(for block: Block) {
		let layout = MSMessageTemplateLayout()
		layout.image = UIImage(named: "test")!
		layout.caption = block.hour.getFormattedHour()
		layout.subcaption = block.agendaItem?.title.capitalized
		layout.trailingCaption = "Tap to add"
		
		let message = MSMessage()
		message.layout = layout
		
		savedConversation?.insert(message, completionHandler: { (error) in
			if error == nil {
				DispatchQueue.main.async { UINotificationFeedbackGenerator().notificationOccurred(.success) }
			} else {
				DispatchQueue.main.async { UINotificationFeedbackGenerator().notificationOccurred(.error) }
			}
		})
	}
}

// MARK: - Table View

extension MessagesViewController: UITableViewDelegate, UITableViewDataSource {
	
	func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
		return blocks.count
	}
	
	func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
		guard let cell = tableView.dequeueReusableCell(withIdentifier: "hourBlockCell") as? HourBlockCell else { return UITableViewCell() }
		let block = blocks[indexPath.row]
		cell.build(with: block.agendaItem, for: block.hour)
		return cell
	}
	
	func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
		let block = blocks[indexPath.row]
		
		if block.agendaItem == nil {
			DispatchQueue.main.async { UINotificationFeedbackGenerator().notificationOccurred(.error) }
			return
		}
		
		createMessage(for: block)
	}
}
